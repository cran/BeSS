// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// bess_cox
List bess_cox(Eigen::MatrixXd& X, Eigen::VectorXd& status, int T0, int max_steps, Eigen::VectorXd& beta, Eigen::VectorXd& weights, int cox_max, double eta, bool normal);
RcppExport SEXP _BeSS_bess_cox(SEXP XSEXP, SEXP statusSEXP, SEXP T0SEXP, SEXP max_stepsSEXP, SEXP betaSEXP, SEXP weightsSEXP, SEXP cox_maxSEXP, SEXP etaSEXP, SEXP normalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type status(statusSEXP);
    Rcpp::traits::input_parameter< int >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type cox_max(cox_maxSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< bool >::type normal(normalSEXP);
    rcpp_result_gen = Rcpp::wrap(bess_cox(X, status, T0, max_steps, beta, weights, cox_max, eta, normal));
    return rcpp_result_gen;
END_RCPP
}
// bess_coxs
List bess_coxs(Eigen::MatrixXd& X, Eigen::VectorXd& status, Eigen::VectorXi& T_list, int max_steps, Eigen::VectorXd& beta0, Eigen::VectorXd& weights, bool warm_start, int cox_max, double eta, bool normal);
RcppExport SEXP _BeSS_bess_coxs(SEXP XSEXP, SEXP statusSEXP, SEXP T_listSEXP, SEXP max_stepsSEXP, SEXP beta0SEXP, SEXP weightsSEXP, SEXP warm_startSEXP, SEXP cox_maxSEXP, SEXP etaSEXP, SEXP normalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type status(statusSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type T_list(T_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type warm_start(warm_startSEXP);
    Rcpp::traits::input_parameter< int >::type cox_max(cox_maxSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< bool >::type normal(normalSEXP);
    rcpp_result_gen = Rcpp::wrap(bess_coxs(X, status, T_list, max_steps, beta0, weights, warm_start, cox_max, eta, normal));
    return rcpp_result_gen;
END_RCPP
}
// bess_cox_gs
List bess_cox_gs(Eigen::MatrixXd& X, Eigen::VectorXd& status, int s_min, int s_max, int K_max, int max_steps, double epsilon, Eigen::VectorXd& beta0, Eigen::VectorXd& weights, bool warm_start, int cox_max, double eta, bool normal);
RcppExport SEXP _BeSS_bess_cox_gs(SEXP XSEXP, SEXP statusSEXP, SEXP s_minSEXP, SEXP s_maxSEXP, SEXP K_maxSEXP, SEXP max_stepsSEXP, SEXP epsilonSEXP, SEXP beta0SEXP, SEXP weightsSEXP, SEXP warm_startSEXP, SEXP cox_maxSEXP, SEXP etaSEXP, SEXP normalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type status(statusSEXP);
    Rcpp::traits::input_parameter< int >::type s_min(s_minSEXP);
    Rcpp::traits::input_parameter< int >::type s_max(s_maxSEXP);
    Rcpp::traits::input_parameter< int >::type K_max(K_maxSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type warm_start(warm_startSEXP);
    Rcpp::traits::input_parameter< int >::type cox_max(cox_maxSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< bool >::type normal(normalSEXP);
    rcpp_result_gen = Rcpp::wrap(bess_cox_gs(X, status, s_min, s_max, K_max, max_steps, epsilon, beta0, weights, warm_start, cox_max, eta, normal));
    return rcpp_result_gen;
END_RCPP
}
// ggetcox_A
List ggetcox_A(Eigen::MatrixXd X, Eigen::VectorXi G, Eigen::VectorXi index, int T0, Eigen::VectorXd beta0, int n, int p, int N, Eigen::VectorXd status, Eigen::VectorXd weights, Eigen::VectorXi B00);
RcppExport SEXP _BeSS_ggetcox_A(SEXP XSEXP, SEXP GSEXP, SEXP indexSEXP, SEXP T0SEXP, SEXP beta0SEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP, SEXP statusSEXP, SEXP weightsSEXP, SEXP B00SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type status(statusSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type B00(B00SEXP);
    rcpp_result_gen = Rcpp::wrap(ggetcox_A(X, G, index, T0, beta0, n, p, N, status, weights, B00));
    return rcpp_result_gen;
END_RCPP
}
// bess_glm
List bess_glm(Eigen::MatrixXd& X, Eigen::VectorXd& y, int T0, int max_steps, Eigen::VectorXd& beta, double& coef0, Eigen::VectorXd& weights, int glm_max, bool normal);
RcppExport SEXP _BeSS_bess_glm(SEXP XSEXP, SEXP ySEXP, SEXP T0SEXP, SEXP max_stepsSEXP, SEXP betaSEXP, SEXP coef0SEXP, SEXP weightsSEXP, SEXP glm_maxSEXP, SEXP normalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double& >::type coef0(coef0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type glm_max(glm_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type normal(normalSEXP);
    rcpp_result_gen = Rcpp::wrap(bess_glm(X, y, T0, max_steps, beta, coef0, weights, glm_max, normal));
    return rcpp_result_gen;
END_RCPP
}
// bess_glms
List bess_glms(Eigen::MatrixXd& X, Eigen::VectorXd& y, Eigen::VectorXd& T_list, int max_steps, Eigen::VectorXd& beta0, double& intercept, Eigen::VectorXd& weights, bool warm_start, int glm_max, bool normal);
RcppExport SEXP _BeSS_bess_glms(SEXP XSEXP, SEXP ySEXP, SEXP T_listSEXP, SEXP max_stepsSEXP, SEXP beta0SEXP, SEXP interceptSEXP, SEXP weightsSEXP, SEXP warm_startSEXP, SEXP glm_maxSEXP, SEXP normalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type T_list(T_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< double& >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type warm_start(warm_startSEXP);
    Rcpp::traits::input_parameter< int >::type glm_max(glm_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type normal(normalSEXP);
    rcpp_result_gen = Rcpp::wrap(bess_glms(X, y, T_list, max_steps, beta0, intercept, weights, warm_start, glm_max, normal));
    return rcpp_result_gen;
END_RCPP
}
// bess_glm_gs
List bess_glm_gs(Eigen::MatrixXd& X, Eigen::VectorXd& y, int s_min, int s_max, int K_max, int max_steps, double epsilon, Eigen::VectorXd& beta0, double coef0, Eigen::VectorXd& weights, bool warm_start, bool normal, int glm_max);
RcppExport SEXP _BeSS_bess_glm_gs(SEXP XSEXP, SEXP ySEXP, SEXP s_minSEXP, SEXP s_maxSEXP, SEXP K_maxSEXP, SEXP max_stepsSEXP, SEXP epsilonSEXP, SEXP beta0SEXP, SEXP coef0SEXP, SEXP weightsSEXP, SEXP warm_startSEXP, SEXP normalSEXP, SEXP glm_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type s_min(s_minSEXP);
    Rcpp::traits::input_parameter< int >::type s_max(s_maxSEXP);
    Rcpp::traits::input_parameter< int >::type K_max(K_maxSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< double >::type coef0(coef0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type warm_start(warm_startSEXP);
    Rcpp::traits::input_parameter< bool >::type normal(normalSEXP);
    Rcpp::traits::input_parameter< int >::type glm_max(glm_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(bess_glm_gs(X, y, s_min, s_max, K_max, max_steps, epsilon, beta0, coef0, weights, warm_start, normal, glm_max));
    return rcpp_result_gen;
END_RCPP
}
// gget_A
List gget_A(Eigen::MatrixXd X, Eigen::VectorXd y, Eigen::VectorXi G, Eigen::VectorXi index, int T0, Eigen::VectorXd beta0, double coef0, int n, int p, int N, Eigen::VectorXd weights, Eigen::VectorXi B00);
RcppExport SEXP _BeSS_gget_A(SEXP XSEXP, SEXP ySEXP, SEXP GSEXP, SEXP indexSEXP, SEXP T0SEXP, SEXP beta0SEXP, SEXP coef0SEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP, SEXP weightsSEXP, SEXP B00SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< double >::type coef0(coef0SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type B00(B00SEXP);
    rcpp_result_gen = Rcpp::wrap(gget_A(X, y, G, index, T0, beta0, coef0, n, p, N, weights, B00));
    return rcpp_result_gen;
END_RCPP
}
// bess_lm
List bess_lm(Eigen::MatrixXd& X, Eigen::VectorXd& y, int T0, int max_steps, Eigen::VectorXd& beta, Eigen::VectorXd& weights, bool normal);
RcppExport SEXP _BeSS_bess_lm(SEXP XSEXP, SEXP ySEXP, SEXP T0SEXP, SEXP max_stepsSEXP, SEXP betaSEXP, SEXP weightsSEXP, SEXP normalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type normal(normalSEXP);
    rcpp_result_gen = Rcpp::wrap(bess_lm(X, y, T0, max_steps, beta, weights, normal));
    return rcpp_result_gen;
END_RCPP
}
// bess_lms
List bess_lms(Eigen::MatrixXd& X, Eigen::VectorXd& y, Eigen::VectorXi& T_list, int max_steps, Eigen::VectorXd& beta0, Eigen::VectorXd& weights, bool warm_start, bool normal);
RcppExport SEXP _BeSS_bess_lms(SEXP XSEXP, SEXP ySEXP, SEXP T_listSEXP, SEXP max_stepsSEXP, SEXP beta0SEXP, SEXP weightsSEXP, SEXP warm_startSEXP, SEXP normalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type T_list(T_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type warm_start(warm_startSEXP);
    Rcpp::traits::input_parameter< bool >::type normal(normalSEXP);
    rcpp_result_gen = Rcpp::wrap(bess_lms(X, y, T_list, max_steps, beta0, weights, warm_start, normal));
    return rcpp_result_gen;
END_RCPP
}
// bess_lm_gs
List bess_lm_gs(Eigen::MatrixXd& X, Eigen::VectorXd& y, int s_min, int s_max, int K_max, int max_steps, double epsilon, Eigen::VectorXd& beta0, Eigen::VectorXd& weights, bool warm_start, bool normal);
RcppExport SEXP _BeSS_bess_lm_gs(SEXP XSEXP, SEXP ySEXP, SEXP s_minSEXP, SEXP s_maxSEXP, SEXP K_maxSEXP, SEXP max_stepsSEXP, SEXP epsilonSEXP, SEXP beta0SEXP, SEXP weightsSEXP, SEXP warm_startSEXP, SEXP normalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type s_min(s_minSEXP);
    Rcpp::traits::input_parameter< int >::type s_max(s_maxSEXP);
    Rcpp::traits::input_parameter< int >::type K_max(K_maxSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type warm_start(warm_startSEXP);
    Rcpp::traits::input_parameter< bool >::type normal(normalSEXP);
    rcpp_result_gen = Rcpp::wrap(bess_lm_gs(X, y, s_min, s_max, K_max, max_steps, epsilon, beta0, weights, warm_start, normal));
    return rcpp_result_gen;
END_RCPP
}
// gbess_lm
List gbess_lm(Eigen::MatrixXd& X, Eigen::VectorXd& y, Eigen::VectorXi& G, Eigen::VectorXi& index, Eigen::VectorXi orderGi, List& PhiG, List& invPhiG, int T0, int max_steps, Eigen::VectorXd& beta0, Eigen::VectorXd& weights, int n, int p, int N, bool normal);
RcppExport SEXP _BeSS_gbess_lm(SEXP XSEXP, SEXP ySEXP, SEXP GSEXP, SEXP indexSEXP, SEXP orderGiSEXP, SEXP PhiGSEXP, SEXP invPhiGSEXP, SEXP T0SEXP, SEXP max_stepsSEXP, SEXP beta0SEXP, SEXP weightsSEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP, SEXP normalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type orderGi(orderGiSEXP);
    Rcpp::traits::input_parameter< List& >::type PhiG(PhiGSEXP);
    Rcpp::traits::input_parameter< List& >::type invPhiG(invPhiGSEXP);
    Rcpp::traits::input_parameter< int >::type T0(T0SEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type normal(normalSEXP);
    rcpp_result_gen = Rcpp::wrap(gbess_lm(X, y, G, index, orderGi, PhiG, invPhiG, T0, max_steps, beta0, weights, n, p, N, normal));
    return rcpp_result_gen;
END_RCPP
}
// gbess_lms
List gbess_lms(Eigen::MatrixXd& X, Eigen::VectorXd& y, Eigen::VectorXi& G, Eigen::VectorXi& index, Eigen::VectorXi& orderGi, List& PhiG, List& invPhiG, Eigen::VectorXi& T_list, int max_steps, Eigen::VectorXd& beta0, Eigen::VectorXd& weights, int n, int p, int N, bool warm_start, bool normal);
RcppExport SEXP _BeSS_gbess_lms(SEXP XSEXP, SEXP ySEXP, SEXP GSEXP, SEXP indexSEXP, SEXP orderGiSEXP, SEXP PhiGSEXP, SEXP invPhiGSEXP, SEXP T_listSEXP, SEXP max_stepsSEXP, SEXP beta0SEXP, SEXP weightsSEXP, SEXP nSEXP, SEXP pSEXP, SEXP NSEXP, SEXP warm_startSEXP, SEXP normalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type orderGi(orderGiSEXP);
    Rcpp::traits::input_parameter< List& >::type PhiG(PhiGSEXP);
    Rcpp::traits::input_parameter< List& >::type invPhiG(invPhiGSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type T_list(T_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type warm_start(warm_startSEXP);
    Rcpp::traits::input_parameter< bool >::type normal(normalSEXP);
    rcpp_result_gen = Rcpp::wrap(gbess_lms(X, y, G, index, orderGi, PhiG, invPhiG, T_list, max_steps, beta0, weights, n, p, N, warm_start, normal));
    return rcpp_result_gen;
END_RCPP
}
// Normalize2
List Normalize2(Eigen::MatrixXd& X, Eigen::VectorXd& weights);
RcppExport SEXP _BeSS_Normalize2(SEXP XSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(Normalize2(X, weights));
    return rcpp_result_gen;
END_RCPP
}
// EigenR
Eigen::MatrixXd EigenR(Eigen::MatrixXd X);
RcppExport SEXP _BeSS_EigenR(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BeSS_bess_cox", (DL_FUNC) &_BeSS_bess_cox, 9},
    {"_BeSS_bess_coxs", (DL_FUNC) &_BeSS_bess_coxs, 10},
    {"_BeSS_bess_cox_gs", (DL_FUNC) &_BeSS_bess_cox_gs, 13},
    {"_BeSS_ggetcox_A", (DL_FUNC) &_BeSS_ggetcox_A, 11},
    {"_BeSS_bess_glm", (DL_FUNC) &_BeSS_bess_glm, 9},
    {"_BeSS_bess_glms", (DL_FUNC) &_BeSS_bess_glms, 10},
    {"_BeSS_bess_glm_gs", (DL_FUNC) &_BeSS_bess_glm_gs, 13},
    {"_BeSS_gget_A", (DL_FUNC) &_BeSS_gget_A, 12},
    {"_BeSS_bess_lm", (DL_FUNC) &_BeSS_bess_lm, 7},
    {"_BeSS_bess_lms", (DL_FUNC) &_BeSS_bess_lms, 8},
    {"_BeSS_bess_lm_gs", (DL_FUNC) &_BeSS_bess_lm_gs, 11},
    {"_BeSS_gbess_lm", (DL_FUNC) &_BeSS_gbess_lm, 15},
    {"_BeSS_gbess_lms", (DL_FUNC) &_BeSS_gbess_lms, 16},
    {"_BeSS_Normalize2", (DL_FUNC) &_BeSS_Normalize2, 2},
    {"_BeSS_EigenR", (DL_FUNC) &_BeSS_EigenR, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BeSS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
